
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # port 9864 -> datanode
    map $host $redirect_9864 {
        spark-worker1 http://localhost:10009;
        spark-worker2 http://localhost:10011;
        # spark-master http://localhost:10004;
    }

    server {
        listen 9864;
        server_name spark-worker1 spark-worker2;

        location / {
            return 301 $redirect_9864;  # 첫 번째 서버 블록에 대한 리다이렉트 URL 사용
        }
    }


    # 8081 -> spark-worker1, spark-worker2
    map $host $redirect_8081 {
        spark-worker1 http://localhost:10008;
        spark-worker2 http://localhost:10010;
    }

    server {
        listen 8081;
        server_name spark-worker1 spark-worker2;

        location / {
            return 301 $redirect_8081;  # 두 번째 서버 블록에 대한 리다이렉트 URL 사용
        }
    }

    # 8080 -> spark-master
    map $host $redirect_8080{
        spark-master http://localhost:10000;
    }

    server {
        listen 8080;  # 같은 포트 8081에서 수신 대기
        server_name spark-master;

        location / {
            return 301 $redirect_8080;
        }
    }

    # 8088 -> yarn-resourcemanager
    map $host $redirect_8088 {
        spark-master http://localhost:10005;
    }

    server {
        listen 8088;
        server_name spark-master;

        location / {
            return 301 $redirect_8088;
        }   
    }

    # 8042 -> yarn-nodemanager1, yarn-nodemanager2
    map $host $redirect_8042 {
        spark-worker1 http://localhost:10015;
        spark-worker2 http://localhost:10016;
    }

    server {
        listen 8042;
        server_name spark-worker1 spark-worker2;

        location / {    
            return 301 $redirect_8042;
        }
    }


    server {
        listen       8099;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
